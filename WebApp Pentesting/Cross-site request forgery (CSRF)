CSRF:(Cross-Site Request Forgery)
=================================
Here, we force an that unwanted action onto a victim, like:
	changing the email address of victim's account
	changing vicitm's password
	transfering money from vicitm's account to attacker's account
Basics:
	lets take example of money transaction:
	first, the user needs to login and then, go to transfer portal, select reciptent and then, transfer the money.
	When these steps are taken, a CSRF token is generated on each and every page as we progress thorugh the application.
	The previous token is verified before the next step can take place to maintain security.
	Also,it helps keep track of user's activities on the application.
Conditions for CSRF:
	A relevant action:(cond-1)
		There should be an action within the application that the attacker has a reason to induce
	No unpredictable request parameters:(cond-2)
		The attacker should be able to determine/guess values of every parameter
	Cookie-based session handling:(cond-3)
		There should be no CSRF token/cookie present
Using BURP:
	First, we need to know, which action do we want to attack
	then, turn on the burp proxy and walkthrough the process of that action
	then, go to burp -> proxy -> history -> see the requests and check if 'CSRF cookie' is present or not
	if 'CSRF cookie' is absent, we have 2 ways:
		way-1:(manual Way)(used for testing of CSRF)	
			burp -> proxy -> history -> select that request -> right click -> send to repeater -> repeat the request -> based on response of repeating the request, we can confirm whether CSRF vulnerability is present or not.
		way-2:(automated)
			burp -> proxy -> history -> select that request -> right click -> engagement-tools -> generate-csrf-poc
			go to options -> include auto-submit-script
			regenerate
			copy HTML
			make a html file and open it in browser
				if email changes => EXPLOITED
NOTE:
	CSRF can be exploited almost anywhere (where there is a function such as change name/other_value, transfer/buy/add_to_cart), where there is no CSRF token in request.
Example of exploiting CSRF:
	webapp:
		POST /email/change HTTP/1.1
		Host: vulnerable-website.com
		Content-Type: application/x-www-form-urlencoded
		Content-Length: 30
		Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfE
		email=wiener@normal-user.com
			it follows all 3 conditions
	exploitation:
		<html>
		  <body>
		    <form action="https://vulnerable-website.com/email/change" method="POST">
		      <input type="hidden" name="email" value="pwned@evil-user.net" />
		    </form>
		    <script>
		      document.forms[0].submit();
		    </script>
		  </body>
		</html>
In case we are missing cond-3(have CSRF), we can do the following:
	Change the request method:
		Some applications validate the token only when POST request is used and skip the CSRF validation when the GET method is used. 
		So, change method of request
	Remove CSRF token manually:
		Some applications validate the token only when it is present and skip the validation if the token is removed.
		So, just remove the entire parameter containing the token (not just its value) to bypass the validation.
Preventing CSRF attacks:
	A CSRF token is a unique value that is generated by server-side application and transmitted to client in such a way that CSRF tokens are generated on every page and whenever we progress thorugh the webapp, it verifies the previous CSRF token.
	How should CSRF tokens be generated?
		CSRF tokens should contain significant entropy and be strongly unpredictable, with the same properties as session tokens in general.
		CSRF= cryptographic strength pseudo-random number generator(PRNG) + timestamp + static secret.
	How should CSRF tokens be transmitted?
		An approach that is normally effective is to transmit the token to the client within a hidden field of an HTML form that is submitted using the POST method. The token will then be included as a request parameter when the form is submitted:
			<input type="hidden" name="csrf-token" value="CIwNZNlR4XbisJF39I8yWnWX9wX4WFoz" />