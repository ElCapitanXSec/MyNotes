BOF & R.E. & Malware Analysis & Ghidra::
======================================
Malware Analysis:
	Sandbox:
		sandboxie
		cuckoo
	Sample Malware:
		generate random processes to increase load
			%0|%0
		create random folders to increase hdd utilization
			:loop
			mkdir %random%
			goto loop
			------------
			:loop
			mkdir %random%
			echo "abcd">>abcd.txt
			goto loop		
		FUD:
			RAT:
				njrat
				dark-commet
			binding virus to some file:
				chrome crypter
	sharing over internet:
		tinyurl
		ngrok
	saving urself:
		windows:
		netstat -ana => see process, if any process has "established", then its a RAT, see its PID
		taskkill/PID <PID> /F
ASM:
	Process of .c to .exe:
		hello.c
		  |(pre_processors)
		hello.i
		  |(compiler)
		hello.s
		  |(assembler)
		hello.o
		  |(linker)
		hello.exe
		  |
		stored in RAM when executed
	CPU:
		CU => control unit
		Execution Unit => execution of instructions
		Register => internal memory location
		Flag => used to indiacte events during execution
	Intel:
		IA-32 => every Register is of 32 bits
		IA-64 => every Register is of 64 bits
	Registers:(4 Types)
		General Purpose:(8 Types)(useddin calculations in CPU)
			EAX
			EBX
			ECX
			EDX
			ESI
			EDI
			ESP => STACK POINTER => points at top of the stack
				Its functions:
					jump to the next pointer
					call
			EBP => BASE POINTER
			Note:
				A => Accumulator
				B => Base
				C => Code/counter
				D => Data
				S => Stack
		Segment:(6 Types)
			CS
			DS
			SS
			ES
			FS
			GS
		Instruction Point Register:(1 Type)
			EIP => MAIN
		Control Register:(5 Types)
			CR0
			CR1
			CR2
			CR3
			CR4
	Stack:(LIFO => last in, first out)
		Structure of stack:
			------------
			|stack     | ^highest mem
			-----------| |
			|unused mem| |
			------------ |
			|heap      | |(dynamic memory(malloc()))
			------------ |
			|.bss      | |(uninitialized data)
			------------ |
			|.data     | |(data variable)
			------------ |
			|.text     | |(program code)
			------------ lowest mem
		filling of stack:
			-----------(high mem)
			|4| ESP   |
			-----------
			|3| 7     |
			-----------
			|2| 9     |
			-----------
			|1| 9     |
			-----------
			|0| 1     |(low mem)
			-----------<- EBP
			suppose we fill 1997:
				initially ESP=EBP=INDEX-0
				enter 1 -> ESP at 1
				enter 9 -> ESP at 2
				enter 9 -> ESP at 3
				enter 7 -> ESP at 4
			ESP:
				it points to top of a stack
				functions:
					jump to the next pointer
					call
			EBP => points at base of stack
				NOTE: every stack STARTS at x08048000
			Operations in STACK:
				push() => push a value in top of stack
				pop() => remove top most stack value
	Assembly Primer:
		NOTE: if kernel>2.6:
			virtual address randomization is ON
				It changes the base address of a stack everytime a process is started. helps to avoid buffer overflow
				to turn it off => 
					leafpad /proc/sys/kernel/randomize_via_space => change value to 0
		code:(c) => code.c
			#include<stdio.h>
			#include<stdlib.h
			int add(int x, int y)
			{
				int z=10;
				z=x+y;
				return z;
			}
			int main(int argc, char**argv)
			{
				int a = atoi(agrv[1])
				int b = atoi(argv[2])
				int c;
				char buffer[100];
				gets(buffer);
				puts(buffer);
				c=add(a,b);
				printf("sum of %d+%d = %d\n",a,b,c);
				exit(0);
			}
		its execution:
			gcc -ggdb -o code code.c => for compiling
			./code 10 20
		its memomry layout:
			ps -aux | grep "code" => gives pid(6124)
			cd /proc/6124
			cat maps => memory layout file
		Using gdb:
			gdb ./code
				gdb>list x => prints xth line of source code
				gdb>run 10 20 => run program
				gdb>disassemble func_name => covert that function code to assembly
				gdb>break x => creates a halt point at line no. 'x' 
Buffer Overflow:
	Stack Structure:
		--------
		|BUFFER|(unknown size)
		|-------
		|EBP   |(unkown)
		|-------
		|EIP   |(4 bytes)(always)
		--------
		buffer overflow means overflowing BUFFER + EBP
	Protections in WIN_7 and updates:
		DEP:(Data Execution Prevention)
			Set of protocols/soft which perform additional checks on memory to prevent malicious code from running on a system
		ASLR:(Address Space Layout Randomization)
			randomizes the base address of loaded applications everytime the os is booted
	Protections in linux kernel>2.6:
		virtual address randomization is ON
			It changes the base address of a stack everytime a process is started. helps to avoid buffer overflow
			to turn it off => 
				leafpad /proc/sys/kernel/randomize_via_space => change value to 0