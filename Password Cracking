Password Cracking:
=================
Basics:(Theory)
	Plaintext => Data before encryption or hashing
	Encoding => (NOT encryption) its a form of data representation base64/hex
	Hash => Hash is the output of a hash function.
	Cipher => Method of encrypting/decrypting data.
	Ciphertext => encrypted data
	Encryption => Transforming data into ciphertext, using a cipher.
	Key => Some information that is needed to decrypt the ciphertext and obtain the plaintext.
	Passphrase => Passphrase is similar to a password and is used to protect a key
	Hash Function:
		Its different from encryption as there is no key, and it’s meant to make it impossible to go from the output back to the input.
		It takes input data of any size, and creates a summary or "DIGEST" of that data. The output is a fixed size.
		The output of a hash function is normally raw bytes, which are then encoded commonly in base 64 or hexadecimal.
	Integrity Checking:(Application of Hash)
		If you put the same data in, you always get the same data out. If even a single bit changes, the hash will change a lot. This means you can use it to check that files haven't been modified or to make sure that they have downloaded correctly.
		HMACs:
			HMAC is a method of using a cryptographic hashing function to verify the authenticity and integrity of data. A HMAC can be used to ensure that the person who created the HMAC is who they say they are (authenticity), and that the message hasn’t been modified or corrupted (integrity). They use a secret key, and a hashing algorithm in order to produce a hash.
	Hash Collision:
		It occurs when 2 different inputs give the same output. Due to the pigeonhole effect, collisions are not avoidable. The pigeonhole effect is basically, there are a set number of different output values for the hash function, but you can give it any size input. As there are more inputs than outputs, some of the inputs must give the same output. If you have 128 pigeons and 96 pigeonholes, some of the pigeons are going to have to share.
	Issue with storing Hashes on Servers:
		Due to a lot of data breaches, companies started storing hashes instead to cleartext passwords, so that, if database got leaked, then an attacker would have to crack each password to find out what the password was. That sounds fairly useful.
		Issue-1:
			What if two users have the same password?
			A hash function will always turn the same input into the same output
		Issue-2:
			Attacker can create a "Rainbow Table" to break the hashes.
	Rainbow Table:
		Its a lookup table of hashes to plaintexts, so you can quickly find out what password a user had just from the hash. A rainbow table trades time taken to crack a hash for hard disk space, but they do take time to create.
	Classification of Encryption:
		Symmetric Encryption:
			It uses the SAME KEY to encrypt and decrypt the data.
			These algorithms tend to be faster than asymmetric cryptography, and use smaller keys 
			Examples:
				DES (Broken)(key length => 56 bits)
				AES (key length => 128 or 256 bit) 
		Asymmetric Encryption:
			It uses A PAIR OF KEYS, one to encrypt and the other  to decrypt.
			Normally these keys are referred to as PUBLIC KEY and PRIVATE KEY. Data encrypted with the private key can be decrypted with the public key, and vice versa. Your private key needs to be kept private, hence the name. Asymmetric encryption tends to be slower and uses larger keys.
			Examples:
				RSA (key length => 2048 to 4096 bit)
				Elliptic Curve Cryptography
	Digital Signature:
		It's a way to prove authenticity of files, to prove who created or modified them. Using asymmetric cryptography, you produce a signature with your private key and it can be verified using your public key. As only you should have access to your private key, this proves you signed the file.
		The simplest form of digital signature would be encrypting the document with your private key, and then if someone wanted to verify this signature they would decrypt it with your public key and check if the files match.
	Certificates:
		Its based on public key cryptography and is linked to digital signatures.
		used => HTTPS.
		The web server has a certificate that says it is the real website.com. The certificates have a chain of trust, starting with a root CA (certificate authority). Root CAs are automatically trusted by your device, OS, or browser from install. Certs below that are trusted because the Root CAs say they trust that organisation. Certificates below that are trusted because the organisation is trusted by the Root CA and so on.
	SSH Key Authentication:
		This uses public and private RSA keys(id_rsa.key) to prove that the client is a valid and authorised user on the server.
		Using private key we can log in to servers that will accept it unless the key is encrypted.
		Tool to create keys for SSH: ssh-keygen
		When generating an SSH key to log in to a remote machine, you should generate the keys on your machine and then copy the public key to server as this means the private key never exists on the server/target.
		Working of SSH Keys:
			The ~/.ssh folder is the default place to store these keys for OpenSSH. The authorized_keys file in this directory holds public keys that are allowed to access the server if key authentication is enabled.
			In order to use a private SSH key, the permissions must be set up correctly otherwise your SSH client will ignore the file with a warning. Only the owner should be able to read or write to the private key (600 or stricter).
			ssh -i key_Name user@host
		Using SSH keys to get a better shell
			SSH keys are an excellent way to “upgrade” a reverse shell, assuming the user has login enabled (www-data normally does not, but regular users and root will). Leaving an SSH key in authorized_keys on a box can be a useful backdoor, and you don't need to deal with any of the issues of reverse shells like Control-C or lack of tab completion.
	PGP/GPG:	
		PGP:(Pretty Good Privacy)
			It’s a software that implements encryption for encrypting files, performing digital signing and more.
		GPG:(a.k.a. GnuPG)
			Its an Open Source implementation of PGP from the GNU project.
			It can be used to decrypt files in CTFs.
			With PGP/GPG, private keys can be protected with passphrases in a similar way to SSH private keys. You can attempt to crack this passphrase using john
Common Encoding:
	binary(base2):
	octal(base8):
	hexadecimal:(base16)
		echo -n "string" | xx -r -ps => decode	
	base32:
		characterset: A–Z and 2–7 (26 + 6 = 32)
	base36:
		characterset: A–Z and 0–9
	base58:
		characterset: 1-9 and A-Z(except I,O) and a-z (excpet l)
	base62:
		characterset: A-Z and a-z and 0-9
	base64:
		Theory:
			characterset: A-Z and a-z and 0-9 and + and /
			padding: = (padding is used to get a specific size od string)
				there may or may not be padding
		echo -n "string" | base64 -d => decode	
	base85:(ascii85)
		characterset: ASCII 33 (“!”) to ASCII 117 (‘u’)
	rot:
		most common: rot13 and rot47
	vigenere cipher:
	brainfuck:
AES:(Advanced Encryption Standard)
	a.k.a. Rijndael after its creators
	It was a replacement for DES which had short keys and other cryptographic flaws.
	Like DES, AES also operate on blocks of data(a block is a fixed size series of bits)
DES cryptography:
Wordlists:(Most Important)
	Wordlist is the most important part in HASH Cracking!
	Prebuilt Wordlists:
		/usr/share/wordlists/
			rockyou.txt
				year: 2009
		seclists:(apt get install seclists)
			seclists/passwords/10k-most-common.txt => smaller than rockyou.txt
		crackstation-human-only:
			crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm
			64 Million real passwords leaked from a lot of databases
		m3g9tr0n_Passwords_WordList_CLEANED:
			forums.pirate-server.com/data/m3g9tr0n_Passwords_WordList_CLEANED.zip
			122 Million Passwords
		Leaked Password Dumps:
			https://weakpass.com/wordlist	
	Making Custom Wordlists:
		cewl:
			it analyses the website and creates wordlist according to that 
			cewl www.abcd.com -m 6 -w file.txt
		crunch:
			placeholders:(-t)
				@ => lowercase
				, => uppercase
				% => numbers
				^ => spl char ( including space)
			crunch min_len max_len -t ,@@^^%%% -o wordlist.txt
			crunch min_len max_len 01234abCD -0 wordlist.txt
				here 01234abCD is my charset
			charset:
				/usr/share/crunch/charset.lst
				crunch min max /usr/share/crunch/charset.lst mixalpha -o abcd.txt
	Editing Wordlist:
		Using Bash:	
			for i in $(cat initial_list); do echo $i; echo ${i}2019; echo ${i}2020; done > final_list.txt
		Using hashcat rules:
			hashcat --force --stdout initial_list -r /usr/share/hashcat/rules/best64.rule -r /usr/share/hashcat/rules/toggles1.rule | sort -u | awk 'length($0) > 7' > final_list
			-r => rule
				Read Hashcat section for more info on Rules
		Using john rules:
			/etc/john/john.conf => rule file
				append $[0-9] => to add a number in end (0-9)
			john --wordlist=initial --rules --stdout > new.txt
	Focusing more on wordlists: Policy/Pattern/Behaviour
		Based on beahviour, we can edit wordlists, It OPTIMIZES PASSWORD CRACKING ATTACKS.
		Password Policies:
			it is important to know password policy of a company, before cracking
			Length and characterset of Password:	
				standard policy => 8+ with 1S,1U,1D
				admins => 12+ 
				.gov => 12 + with 2U,2L,2S,2D
				google => 8+
				
			Password Rotation(Policy to maintain security):
				to constantly change password after a fixed period of time
				users invented a way to remember to do this
				90 Days Roation Policy:
					Trick => Seasons
					Winter2012
				30 Days Roation Policy:
					Trick => Months
					September29!
				Same root Word: (any time period of rotation)
					Example-1:
						password => Password15
						Root word => Password
						Next Password => Password16
						Next Password => Password17
					Example-2:
						password => Password!
						Root word => Password
						Next Password => Password@
						Next Password => Password#
		Behaviour to use a Number:
			90% of the time => End
			sometimes at begining (lower percentage)
		Behaviour to use a Special Character:
			At End (90%)
			In Begining
			Between 2 words (Hello!World)
			Most common special chars => !@#
		Keyboard Based Password Patterns:
			when password >= 12(.gov)
			it is based on hand, it has different types:
				2x6:(2 hands x 6 characters each hand)
					left => qwe123
					right => TYU%^&
					Using them:
						qwe123TYU%^&[number] => qwe123TYU%^&9
							mostly number is last digit of year number
				other types => 2x2, 2x4, 2x5
		Most popular patterns in corportates:
			9 characters:
				ULLLLLLLD
				ULLLLDDDD
				ULLLLLLDD
				ULLLLLDDD
				ULLLDDDDS
				ULLLLLDDS
				SULLLDDDD
			8 characters:
				ULLLLLDD
				ULLLDDDD
Hash Cracking:
	Hashes are used everywhere including WebApps. We have 2 tools to crack hashes: Hashcat and john, But' Most important part is WORDLIST, its generation and editing.
	Identification:
		hashid:
			hashid hash.txt
		hash-identifier:
			hash-identifier => then, enter ur hash
		https://hashcat.net/wiki/doku.php?id=example_hashes => look for prefix of hash
		NOTE:
			MD5, MD4, NTLM are very identical
	Online hash cracking:(important and helpful)
		crackstation.net => best
			it cracks the hash and it cracks hash of every type
		google the hash directly
	Types of Attacks to Crack HASHES:
		Dictionary Attack:(Wordlist attack)
			read line by line from a wordlist and try each line as a password candidate.
		Combinator Attack:
			Appends each word of a dict1(left_dict) to each word of dict2(right_dict)
		Mask Attack:
			a form of targeted brute-force attack by using placeholders for characters in certain positions
			Note:
				Mask Attack is NEW Brute-force Attack
			Placeholder:
				position of character of password
				A Placeholder is indicated by the ? letter followed by charset:
					?l => LowerCase
					?u => UpperCase
					?d => Digit 
					?h => 0123456789abcdef (hex)
					?H => 0123456789ABCDEF (HEX)
					?s => «space»!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ (Symbols)
					?a => All Except Binary
					?b => 0x00 - 0xff
			Mask:
				String of the Placeholders
		Hybrid Attack:
			Type of Combinator attack where one side is dictionary and the other side is Mask or Rule
		Rule Attack:
			generates permutations against a given wordlist by modifying, trimming, extending, expanding, combining, or skipping words.
	john:(used with CPU)
		a.k.a. JTR(John The Ripper)
		john hash.txt --wordlist= --format=hash_format => Wordlist Attack
		john hash.txt --wordlist= --format=hash_format --rules => Hybrid
		john --mask='?d?d?d?d?d?d' vnc.hash => Mask Attack
		options:
			--format=hash_format
				pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats
			--fork x => create x processes
			--wordlist => it will not take wordlist.txt.gz
			--pot=./list.pot
				john will write all cracked password into list.pot
			--rules:rule_name
			Sessions:
				When we press Ctrl-C, John pauses cracking and saves the information about the progress of the current session to a file ~/.john/john.rec
				john --session=foo hash --wordlist=rockyou.txt
				john --restore=foo => continue an interrupted session
		getting hashes for john:
			ssh2jhon => see details below
			keepass2john abcd.kdbx => it gives hash of keepass
			NOTE: always save hashes found as file.john
			zip2jhon abcd.zip
			kirbi2jhon => kerberos tickets(TGTs)
			gpg2jhon => gpg keys
		Cracking Encrypted SSH private key:(id_rsa)
			./ssh2john.py id_rsa > idcrack
				locate ssh2john
			john --wordlist=rockyou.txt idcrack
				john automatically recongnizes the hash_type most of the times
	hashcat:(used wordlist CPU/GPU)
		hashcat -m hash_type -a attack_type hash.txt wordlist.txt --force
		-m => hash type
		-a => Attack Mode(-a 0 to -a 7)
			Dictionary Attack / Wordlist Attack => 0
			Combinator => 1
			Mask => 3
			Hybrid:
				Wordlist + Mask => 6
				Mask + Wordlist => 7
			Rule Based => 0,6,7
			Wordlist/Dictionary Attack:(normal Attack)(-a 0)
				read line by line from a wordlist and try each line as a password candidate
				hashcat -m 0 -a 0 hash.txt rockyou.txt
			Combinator Attack:(-a 1)
				Appends each word of a dict1(left_dict) to each word of dict2(right_dict)
				hashcat -m 0 -a 1 hash.txt dict1.txt dict2.txt
				-j => rule to append at end of each word of left dict
					-j '$-' => append -
				-k => rule to append at end of each word of right dict
					-k '$!' => append !
			Mask Attack:(-a 3)
				For info: read "Types of Attacks:Mask Attack"
				Hashcat Mask file:(.hcmask)
					Its a set of masks stored in a single plain text file with extension .hcmask.
					example of file.hcmask:
						?u?l?l?l?l?s
						?u?l?l?l?l?l?s
						?l?l?l?l?l
						?l?l?l?l?l?s
				hashcat -m 0 -a 3 hash.txt mask_file.hcmask
			Rule Based Attack:(-m 0)
				/usr/share/hashcat/rules/ => pre-defined rules
				Making Custom rules:
					we make .rule file using inbuilt rules.
					inbuilt rules:
						: => Do Nothing
						l => Lowercase all letters
						u => Uppercase all letters
						c => 1st character upper, rest lower
						$X => append X to end
						^X => add X to front
						sXY => replace all X with Y
					file.rule:
						:
						l
						u
						c
						$1
						$2
						$1$2sa@
				hashcat -a 0 -m 0 file.hash  rockyou.txt -r rules.rule --debug-mode=1 --debug-file=matched.rule --force
					--debug-mode=1:
						Write the rule whenever it successfully cracks a password
					--debug-file=matched.rule:
						matched.rule looks like this:
							79 $1
							21 $1$!
							<hash_number> <rule_used>
						it helps us to find most common patterns used by people, general debugging
			Hybrid Attack:(-m 6 and -m 7)
				Type of Combinator attack where one side is dictionary and the other side is Mask
				Wordlist + Mask:(-m 6)
					hashcat -m 0 -a 6 hash.txt dict.txt ?d?d?d?d
						if dict is abcd => abcd0000 to abcd9999
				Mask + Wordlist:(-m 7)
					hashcat -m 0 -a 6 hash.txt ?d?d?d?d dict.txt
						if dict is abcd => 0000abcd to 9999abcd
		--force => to make hashcat run on cpu
		-b => to benchmark
application password cracking:
	zip:
		zip2jhon -> jhon
		fcrackzip -D -p rockyou.txt file.zip
			-D => dictionary
network password attacks:(attacks on services running on ports like ftp)
	medusa:
		-M => Module(ftp/http/imap/mssql/mysql/etc)
			to see all modules:
				medusa -d
		-m => parameters(can be more than one)
			example:
				medusa -h host.com -u username -P wordlist -M http -m DIR:/admin
		-n => specify port
		-f => stop after first valid creds
		-t => number of logins to be tested concurrently
		medusa -h host.com -U user.txt -P wordlist -M http -n 8080 -f
	crowbar:
		tool to find SSH keys
		efficient with Windows Remote Desktop Protocol(RDP service)
		apt install crowbar
		crowbar -b rdp -s host.com -u admin -C password.txt -n 1
		-b => protocol
		-s => target server
		-C => wordlist
		-n => no of threads
	hydra:
		hydra -l admin -P wordlist.txt protocol://ip -t 4
		hydra -L user.txt -P wordlist.txt protocol://ip:port
			-t => threads(useful)
		HTTP POST Attack:(a service)
			hydra -h host.com http-form-post "/admin/login.php:user=admin&pass=^PAS
			S^:INVALID LOGIN" -l admin -P /usr/share/wordlists/rockyou.txt	
			"login.php:user=admin&pass=^PASS^:INVALID LOGIN" can be divided into 2 parts:
				"post_request:invalid_condition"
				post request:(1st)
					/login.php:log=abcd&pwd=abcd:ERROR => actual request
					placeholders: place where we bruteforce
						/login.php:log=^USER^&pwd=^PASS^:ERROR
						/login.php:log=username&pwd=^PASS^:ERROR
				invalid condition:(2nd)
					we put wrong creds in login page and see where we get redirected too or the error we get and that is our "invalid_condition"
		HTTPS POST Attack:
			similar to HTTP-POST-Attack, but' its "https-form-post"
	Note: do not bruteforce windows IIS login page as it lockouts temporarily
RSA in CTF:
	The key variables that you need to know about for RSA in CTFs are p, q, m, n, e, d, and c.
	“p” and “q” are large prime numbers
	“n” is the product of p and q.
	Public Key is n and d
	Private Key is n and e
	“m” is the message (plaintext)
	“c” is the ciphertext (encrypted text)
	Tools:
		https://github.com/Ganapati/RsaCtfTool
		https://github.com/ius/rsatool
Shadow password cracking: see linux privesc sheet
Password Spraying attacks:
	diff b/w bruteforcing and this:
		Brute-forcing is attempting a large number of passwords on the smallest number of accounts
		Password spraying is attempting same password/s against a list of accounts
	crackmapexec:
		crackmapexec smb ip -u user.txt -p 'Password@1' --continue-on-success 